<!DOCTYPE html>
<html lang="de">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
	<title>Seismic & Audio Recorder</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
	<script src="https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js"></script>
	<style>
		body {
			background-color: #121212;
			color: #f5f5f5;
		}

		canvas {
			border: 1px solid #444;
			width: 100%;
			height: 100px;
		}

		.settings-card {
			font-size: 0.9rem;
			padding: 0.5rem;
		}
	</style>
</head>

<body class="bg-dark text-light">
	<div class="container py-2">
		<h1 class="mb-3 text-center">Seismic & Audio Recorder</h1>
		<div class="d-flex gap-2 justify-content-center">
			<button id="startStopBtn" class="btn btn-primary">Start</button>
			<button id="downloadLogBtn" class="btn btn-secondary">Log herunterladen</button>
			<button id="clearLogBtn" class="btn btn-danger">Log l√∂schen</button>
		</div>

		<div class="card bg-secondary text-light my-3 settings-card">
			<div class="card-body p-2">
				<h6 class="card-title">Einstellungen</h6>
				<label for="audioThreshold" class="form-label">Audio Threshold: <span
						id="audioThresholdVal"></span></label>
				<input type="range" class="form-range" id="audioThreshold" min="0.005" max="0.5" step="0.005"
					value="0.01">
				<label for="seismicThreshold" class="form-label">Seismic Threshold: <span
						id="seismicThresholdVal"></span></label>
				<input type="range" class="form-range" id="seismicThreshold" min="0.5" max="10" step="0.1" value="3">
				<div class="form-check mt-2">
					<input class="form-check-input" type="checkbox" id="enableBeep">
					<label class="form-check-label" for="enableBeep">Warnton aktivieren</label>
				</div>
			</div>
		</div>

		<canvas id="visualizer"></canvas>
		<h5>Log</h5>
		<ul id="log" class="list-group mb-3"></ul>
		<h5>Audio Clips</h5>
		<div id="audioClips"></div>
	</div>

	<script>
		let audioContext, analyser, microphone, stream, isRecording = false, logEntries = [];
		let audioThreshold = 0.01, seismicThreshold = 3, enableBeep = false;
		let canvas = document.getElementById('visualizer'), canvasCtx = canvas.getContext('2d');
		const logList = document.getElementById('log'), audioClipsDiv = document.getElementById('audioClips');

		function loadSettings() {
			let settings = JSON.parse(localStorage.getItem('settings')) || {};
			audioThreshold = settings.audioThreshold || 0.01;
			seismicThreshold = settings.seismicThreshold || 3;
			enableBeep = settings.enableBeep || false;
			document.getElementById('audioThreshold').value = audioThreshold;
			document.getElementById('seismicThreshold').value = seismicThreshold;
			document.getElementById('enableBeep').checked = enableBeep;
			updateThresholdDisplays();
		}

		function saveSettings() {
			localStorage.setItem('settings', JSON.stringify({
				audioThreshold: parseFloat(document.getElementById('audioThreshold').value),
				seismicThreshold: parseFloat(document.getElementById('seismicThreshold').value),
				enableBeep: document.getElementById('enableBeep').checked
			}));
			loadSettings();
		}

		function updateThresholdDisplays() {
			document.getElementById('audioThresholdVal').textContent = audioThreshold.toFixed(3);
			document.getElementById('seismicThresholdVal').textContent = seismicThreshold.toFixed(1);
		}

		function logEvent(type) {
			let entry = `[${new Date().toLocaleTimeString()}] ${type} Event`;
			logEntries.push(entry);
			let li = document.createElement('li');
			li.className = "list-group-item bg-dark text-light";
			li.textContent = entry;
			logList.appendChild(li);
			localStorage.setItem('logEntries', JSON.stringify(logEntries));
		}

		function beep() {
			if (!enableBeep) return;
			let osc = audioContext.createOscillator();
			osc.frequency.value = 440;
			osc.connect(audioContext.destination);
			osc.start();
			osc.stop(audioContext.currentTime + 0.2);
		}

		function visualize() {
			if (!isRecording) return;
			requestAnimationFrame(visualize);
			let freqData = new Uint8Array(analyser.frequencyBinCount);
			analyser.getByteFrequencyData(freqData);
			canvasCtx.fillStyle = '#121212';
			canvasCtx.fillRect(0, 0, canvas.width, canvas.height);
			let x = 0;
			for (let i = 0; i < freqData.length; i++) {
				let barHeight = freqData[i] / 1.5;
				canvasCtx.fillStyle = '#f5f5f5';
				canvasCtx.fillRect(x, canvas.height - barHeight, 2, barHeight);
				x += 3;
			}
		}

		async function startStopRecording() {
			if (!isRecording) {
				try {
					audioContext = new (window.AudioContext || window.webkitAudioContext)();
					await audioContext.resume();
					stream = await navigator.mediaDevices.getUserMedia({ audio: true });
					microphone = audioContext.createMediaStreamSource(stream);
					analyser = audioContext.createAnalyser();
					analyser.fftSize = 2048;
					microphone.connect(analyser);
					isRecording = true;
					document.getElementById('startStopBtn').textContent = "Stop";
					visualize();
				} catch (err) {
					alert('Fehler: ' + err.message);
				}
			} else {
				isRecording = false;
				document.getElementById('startStopBtn').textContent = "Start";
				if (stream) stream.getTracks().forEach(track => track.stop());
			}
		}

		function downloadLog() {
			let blob = new Blob([logEntries.join('\n')], { type: 'text/plain' });
			let a = document.createElement('a');
			a.href = URL.createObjectURL(blob);
			a.download = 'log.txt';
			a.click();
		}

		function clearLog() {
			logEntries = [];
			logList.innerHTML = "";
			localStorage.removeItem('logEntries');
		}

		document.getElementById('startStopBtn').addEventListener('click', startStopRecording);
		document.getElementById('downloadLogBtn').addEventListener('click', downloadLog);
		document.getElementById('clearLogBtn').addEventListener('click', clearLog);
		document.getElementById('audioThreshold').addEventListener('input', saveSettings);
		document.getElementById('seismicThreshold').addEventListener('input', saveSettings);
		document.getElementById('enableBeep').addEventListener('change', saveSettings);

		window.addEventListener('resize', () => { canvas.width = canvas.parentElement.clientWidth; });
		canvas.width = canvas.parentElement.clientWidth;

		loadSettings();
	</script>
</body>

</html>