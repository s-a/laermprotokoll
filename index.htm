<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
	<title>Seismic & Audio Recorder</title>
	<!-- Bootstrap CSS -->
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js"></script>
	<style>
		body {
			background-color: #121212;
			color: #f5f5f5;
			font-family: 'Arial', sans-serif;
		}

		canvas {
			border: 2px solid #555;
			border-radius: 5px;
			width: 100%;
			background-color: #1e1e1e;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
		}

		#log {
			max-height: 300px;
			overflow-y: auto;
			border: 2px solid #555;
			border-radius: 5px;
			padding: 0;
			background-color: #1e1e1e;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
		}

		#log li {
			padding: 5px 10px;
			border-bottom: 1px solid #333;
			transition: background-color 0.3s;
		}

		#log li:hover {
			background-color: #2c2c2c;
		}

		#log li:nth-child(odd) {
			background-color: #252525;
		}

		.btn-custom {
			background-color: #4caf50;
			border: none;
			transition: transform 0.2s, background-color 0.2s;
		}

		.btn-custom:hover {
			transform: scale(1.05);
			background-color: #45a049;
		}

		.form-range {
			accent-color: #ff5722;
		}

		.form-check-input:checked {
			background-color: #ff5722;
			border-color: #ff5722;
		}
	</style>
</head>

<body class="bg-dark text-light">
	<div class="container py-2">
		<h1 class="mb-3 text-center text-info" style="text-shadow: 2px 2px 4px #000;">Seismic & Audio Recorder</h1>
		<div class="d-flex gap-2 justify-content-center">
			<button id="startStopBtn" class="btn btn-custom">Start</button>
			<button id="downloadLogBtn" class="btn btn-secondary">Download Log</button>
			<button id="clearLogBtn" class="btn btn-danger">Clear Log</button>
		</div>

		<h5 class="mt-3 text-warning">Audio Frequency Visualizer</h5>
		<div>
			<button class="btn btn-sm btn-secondary" onclick="toggleCanvas('visualizer', this)">Minimize</button>
			<canvas id="visualizer"></canvas>
			<label for="audioThreshold" class="form-label text-primary">Audio Threshold: <span
					id="audioThresholdVal"></span></label>
			<input type="range" class="form-range" id="audioThreshold" min="0.0001" max="0.1" step="0.0001"
				value="0.001">
		</div>

		<h5 class="mt-3 text-warning">Max Values Over Time</h5>
		<div>
			<button class="btn btn-sm btn-secondary" onclick="toggleCanvas('maxValuesCanvas', this)">Minimize</button>
			<canvas id="maxValuesCanvas" height="100"></canvas>
		</div>

		<div class="mt-3">
			<label for="seismicThreshold" class="form-label text-primary">Seismic Threshold: <span
					id="seismicThresholdVal"></span></label>
			<input type="range" class="form-range" id="seismicThreshold" min="0.01" max="10.00" step="0.01" value="3">
			<div class="form-check mt-2">
				<input class="form-check-input" type="checkbox" id="enableBeep">
				<label class="form-check-label text-light" for="enableBeep">Enable Beep</label>
			</div>
			<div class="form-check mt-2">
				<input class="form-check-input" type="checkbox" id="enableAudioLog" checked>
				<label class="form-check-label text-light" for="enableAudioLog">Enable Audio Log</label>
			</div>
		</div>

		<h5 class="mt-3 text-warning">Log</h5>
		<ul id="log" class="list-group mb-3"></ul>
		<h5 class="text-warning">Audio Clips</h5>
		<div id="audioClips"></div>
	</div>

	<script>
		let audioContext, analyser, microphone, scriptNode, stream, gainNode;
		let isRecording = false, logEntries = [], preAudioBuffer = [];
		let audioThreshold = 0.001, seismicThreshold = 3, enableBeep = false, enableAudioLog = true;
		let recordingEvent = false, eventCaptureStartTime = 0, eventPreBuffer = [], eventPostBuffer = [], lastEventTime = 0;
		let rafId = null, lastAudioLogTime = 0;
		let audioMaxHistory = [], seismicMaxHistory = [], latestAudioMax = 0, latestSeismicMax = 0;
		let wakeLock = null;

		const canvas = document.getElementById('visualizer'), canvasCtx = canvas.getContext('2d');
		const maxValuesCanvas = document.getElementById('maxValuesCanvas'), maxValuesCtx = maxValuesCanvas.getContext('2d');
		const logList = document.getElementById('log'), audioClipsDiv = document.getElementById('audioClips');

		canvas.width = canvas.parentElement.clientWidth;
		maxValuesCanvas.width = maxValuesCanvas.parentElement.clientWidth;

		async function keepScreenAwake() {
			try {
				wakeLock = await navigator.wakeLock.request('screen');
				console.log('Screen Wake Lock aktiviert');

				wakeLock.addEventListener('release', () => {
					console.log('Screen Wake Lock wurde freigegeben');
				});

				return wakeLock;
			} catch (err) {
				console.error(`Wake Lock Fehler: ${err.message}`);
			}
		}

		setInterval(() => {
			if (isRecording) {
				const now = Date.now();
				audioMaxHistory.push({ timestamp: now, value: latestAudioMax });
				seismicMaxHistory.push({ timestamp: now, value: latestSeismicMax });
				const cutoff = now - 60000;
				audioMaxHistory = audioMaxHistory.filter(item => item.timestamp > cutoff);
				seismicMaxHistory = seismicMaxHistory.filter(item => item.timestamp > cutoff);
				latestAudioMax = 0;
				latestSeismicMax = 0;
				drawMaxValuesHistory();
			}
		}, 1000);

		function toggleCanvas(canvasId, button) {
			const canvas = document.getElementById(canvasId);
			if (canvas.style.display === 'none') {
				canvas.style.display = 'block';
				button.textContent = 'Minimize';
			} else {
				canvas.style.display = 'none';
				button.textContent = 'Maximize';
			}
		}

		function drawMaxValuesHistory() {
			maxValuesCtx.fillStyle = '#121212';
			maxValuesCtx.fillRect(0, 0, maxValuesCanvas.width, maxValuesCanvas.height);
			if (audioMaxHistory.length < 2 || seismicMaxHistory.length < 2) return;

			const minTime = Math.min(audioMaxHistory[0].timestamp, seismicMaxHistory[0].timestamp);
			const maxTime = Math.max(audioMaxHistory[audioMaxHistory.length - 1].timestamp,
				seismicMaxHistory[seismicMaxHistory.length - 1].timestamp);
			const timeRange = maxTime - minTime;

			// Draw grid lines
			maxValuesCtx.strokeStyle = '#444';
			for (let i = 1; i < 5; i++) {
				const y = maxValuesCanvas.height * (i / 5);
				maxValuesCtx.beginPath();
				maxValuesCtx.moveTo(0, y);
				maxValuesCtx.lineTo(maxValuesCanvas.width, y);
				maxValuesCtx.stroke();
			}

			// Draw audio max history (0 to 1 range)
			maxValuesCtx.beginPath();
			audioMaxHistory.forEach((item, index) => {
				const x = (item.timestamp - minTime) / timeRange * maxValuesCanvas.width;
				const y = maxValuesCanvas.height - (item.value * maxValuesCanvas.height);
				if (index === 0) maxValuesCtx.moveTo(x, y);
				else maxValuesCtx.lineTo(x, y);
			});
			maxValuesCtx.strokeStyle = 'cyan';
			maxValuesCtx.lineWidth = 2;
			maxValuesCtx.stroke();

			// Draw seismic max history (0 to 20 range, scaled)
			maxValuesCtx.beginPath();
			seismicMaxHistory.forEach((item, index) => {
				const x = (item.timestamp - minTime) / timeRange * maxValuesCanvas.width;
				const y = maxValuesCanvas.height - (item.value / 20 * maxValuesCanvas.height);
				if (index === 0) maxValuesCtx.moveTo(x, y);
				else maxValuesCtx.lineTo(x, y);
			});
			maxValuesCtx.strokeStyle = 'magenta';
			maxValuesCtx.lineWidth = 2;
			maxValuesCtx.stroke();

			// Add legend
			maxValuesCtx.fillStyle = 'cyan';
			maxValuesCtx.fillRect(10, 10, 20, 10);
			maxValuesCtx.fillStyle = 'magenta';
			maxValuesCtx.fillRect(10, 25, 20, 10);
			maxValuesCtx.fillStyle = '#f5f5f5';
			maxValuesCtx.font = '12px Arial';
			maxValuesCtx.fillText('Audio Max', 35, 20);
			maxValuesCtx.fillText('Seismic Max', 35, 35);
		}

		function loadSettings() {
			const settings = JSON.parse(localStorage.getItem('settings')) || {};
			audioThreshold = settings.audioThreshold || 0.001;
			seismicThreshold = settings.seismicThreshold || 3;
			enableBeep = settings.enableBeep || false;
			enableAudioLog = settings.enableAudioLog !== undefined ? settings.enableAudioLog : true;
			document.getElementById('audioThreshold').value = audioThreshold;
			document.getElementById('seismicThreshold').value = seismicThreshold;
			document.getElementById('enableBeep').checked = enableBeep;
			document.getElementById('enableAudioLog').checked = enableAudioLog;
			updateThresholdDisplays();
		}

		function saveSettings() {
			const settings = {
				audioThreshold: parseFloat(document.getElementById('audioThreshold').value),
				seismicThreshold: parseFloat(document.getElementById('seismicThreshold').value),
				enableBeep: document.getElementById('enableBeep').checked,
				enableAudioLog: document.getElementById('enableAudioLog').checked
			};
			localStorage.setItem('settings', JSON.stringify(settings));
			audioThreshold = settings.audioThreshold;
			seismicThreshold = settings.seismicThreshold;
			enableBeep = settings.enableBeep;
			enableAudioLog = settings.enableAudioLog;
			updateThresholdDisplays();
		}

		function updateThresholdDisplays() {
			const audioDb = 20 * Math.log10(audioThreshold);
			document.getElementById('audioThresholdVal').textContent = `${audioThreshold.toFixed(4)} (${audioDb.toFixed(1)} dB)`;
			document.getElementById('seismicThresholdVal').textContent = seismicThreshold.toFixed(1);
		}

		function logEvent(type, amplitude = null) {
			if (type === "Audio" && !enableAudioLog) return;
			const entry = amplitude ?
				`[${new Date().toLocaleString()}] ${type} Event (Amplitude: ${amplitude.toFixed(4)})` :
				`[${new Date().toLocaleString()}] ${type} Event`;
			logEntries.unshift(entry);
			if (logEntries.length > 1000) logEntries.pop();
			const li = document.createElement('li');
			li.className = "list-group-item bg-dark text-light";
			li.textContent = entry;
			logList.insertBefore(li, logList.firstChild);
			try {
				localStorage.setItem('logEntries', JSON.stringify(logEntries));
			} catch (e) {
				console.error('Failed to save log:', e);
			}
		}

		function loadLogs() {
			const storedLogs = JSON.parse(localStorage.getItem('logEntries')) || [];
			logEntries = storedLogs;
			logList.innerHTML = "";
			storedLogs.forEach(entry => {
				const li = document.createElement('li');
				li.className = "list-group-item bg-dark text-light";
				li.textContent = entry;
				logList.appendChild(li);
			});
		}

		function loadAudioClips() {
			audioClipsDiv.innerHTML = "";
			for (let i = 0; i < localStorage.length; i++) {
				const key = localStorage.key(i);
				if (key?.startsWith("audio_")) {
					const dataURL = localStorage.getItem(key);
					const link = document.createElement('a');
					link.href = dataURL;
					link.download = `${key}.mp3`;
					link.textContent = `Audioclip ${key}`;
					link.className = "d-block mb-1 text-info";
					audioClipsDiv.appendChild(link);
				}
			}
		}

		function beep() {
			if (!enableBeep || !audioContext) return;
			const osc = audioContext.createOscillator();
			const gain = audioContext.createGain();
			osc.frequency.value = 440;
			gain.gain.value = 0.5;
			osc.connect(gain);
			gain.connect(audioContext.destination);
			osc.start();
			osc.stop(audioContext.currentTime + 0.2);
			osc.onended = () => { gain.disconnect(); osc.disconnect(); };
		}

		function visualize() {
			if (!isRecording) return;
			rafId = requestAnimationFrame(visualize);
			if (!analyser) return;
			const freqData = new Uint8Array(analyser.frequencyBinCount);
			analyser.getByteFrequencyData(freqData);
			canvasCtx.fillStyle = '#121212';
			canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

			const scaleWidth = 60;
			canvasCtx.fillStyle = '#1e1e1e';
			canvasCtx.fillRect(0, 0, scaleWidth, canvas.height);
			canvasCtx.font = '10px Arial';
			canvasCtx.fillStyle = '#f5f5f5';
			canvasCtx.textAlign = 'right';
			const dbLevels = [0, -10, -20, -30, -40, -50, -60];
			dbLevels.forEach(db => {
				const amplitude = Math.pow(10, db / 20);
				const y = canvas.height * (1 - (amplitude / 1));
				canvasCtx.fillText(`${db} dB`, scaleWidth - 5, y + 3);
				canvasCtx.strokeStyle = '#444';
				canvasCtx.beginPath();
				canvasCtx.moveTo(scaleWidth - 5, y);
				canvasCtx.lineTo(scaleWidth, y);
				canvasCtx.stroke();
			});

			const plotWidth = canvas.width - scaleWidth;
			const barWidth = plotWidth / freqData.length;
			let x = scaleWidth;
			for (let i = 0; i < freqData.length; i++) {
				const barHeight = (freqData[i] / 255) * canvas.height;
				canvasCtx.fillStyle = '#4caf50';
				canvasCtx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
				x += barWidth + 1;
			}

			const thresholdY = canvas.height * (1 - (audioThreshold / 0.1));
			if (thresholdY >= 0 && thresholdY <= canvas.height) {
				canvasCtx.strokeStyle = '#ff5722';
				canvasCtx.lineWidth = 2;
				canvasCtx.beginPath();
				canvasCtx.moveTo(scaleWidth, thresholdY);
				canvasCtx.lineTo(canvas.width, thresholdY);
				canvasCtx.stroke();
				canvasCtx.fillStyle = '#ff5722';
				const thresholdDb = 20 * Math.log10(audioThreshold / 0.0001);
				canvasCtx.fillText(`Threshold: ${thresholdDb.toFixed(1)} dB`, scaleWidth + 5, thresholdY - 5);
			}
		}

		async function startStopRecording() {
			if (!isRecording) {
				try {
					audioContext = new (window.AudioContext || window.webkitAudioContext)();
					await audioContext.resume();
					stream = await navigator.mediaDevices.getUserMedia({ audio: true });
					microphone = audioContext.createMediaStreamSource(stream);
					analyser = audioContext.createAnalyser();
					analyser.fftSize = 2048;
					microphone.connect(analyser);
					scriptNode = audioContext.createScriptProcessor(2048, 1, 1);
					scriptNode.onaudioprocess = onAudioProcess;
					microphone.connect(scriptNode);
					gainNode = audioContext.createGain();
					gainNode.gain.value = 0;
					scriptNode.connect(gainNode);
					gainNode.connect(audioContext.destination);

					if (window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission === 'function') {
						await DeviceMotionEvent.requestPermission();
					}
					window.addEventListener('devicemotion', handleMotion, false);

					// Aktiviere Wake Lock beim Start
					await keepScreenAwake();

					isRecording = true;
					document.getElementById('startStopBtn').textContent = "Stop";
					visualize();
				} catch (err) {
					console.error('Start error:', err);
					alert('Error accessing microphone or sensors: ' + err.message);
				}
			} else {
				isRecording = false;
				document.getElementById('startStopBtn').textContent = "Start";
				if (stream) stream.getTracks().forEach(track => track.stop());
				if (scriptNode) scriptNode.disconnect();
				if (microphone) microphone.disconnect();
				if (gainNode) gainNode.disconnect();
				if (audioContext) audioContext.close();
				window.removeEventListener('devicemotion', handleMotion);
				if (rafId) cancelAnimationFrame(rafId);
				rafId = null;

				// Deaktiviere Wake Lock beim Stop
				if (wakeLock) {
					await wakeLock.release();
					wakeLock = null;
					console.log('Screen Wake Lock manuell freigegeben');
				}
			}
		}

		function onAudioProcess(event) {
			if (!isRecording) return;
			const now = Date.now();
			const inputData = event.inputBuffer.getChannelData(0);
			const bufferCopy = new Float32Array(inputData);
			preAudioBuffer.push({ timestamp: now, data: bufferCopy });
			while (preAudioBuffer.length && preAudioBuffer[0].timestamp < now - 15000) {
				preAudioBuffer.shift();
			}
			let sum = 0;
			for (let i = 0; i < bufferCopy.length; i++) {
				sum += bufferCopy[i] * bufferCopy[i];
			}
			const rms = Math.sqrt(sum / bufferCopy.length);
			const peak = Math.max(...Array.from(bufferCopy).map(Math.abs));
			if (peak > latestAudioMax) latestAudioMax = peak;

			if (rms > audioThreshold && (now - lastAudioLogTime > 1000)) {
				logEvent("Audio", rms);
				lastAudioLogTime = now;
			}

			if (rms > audioThreshold && !recordingEvent && (now - lastEventTime > 3000)) {
				triggerEvent("Audio");
			}

			if (recordingEvent) {
				if (now < eventCaptureStartTime + 5000) {
					eventPostBuffer.push(bufferCopy);
				} else {
					setTimeout(finalizeEventCapture, 0);
				}
			}
		}

		function handleMotion(event) {
			const now = Date.now();
			let ax = 0, ay = 0, az = 0;
			if (event.acceleration && event.acceleration.x !== null) {
				ax = event.acceleration.x || 0;
				ay = event.acceleration.y || 0;
				az = event.acceleration.z || 0;
			} else if (event.accelerationIncludingGravity) {
				ax = event.accelerationIncludingGravity.x || 0;
				ay = event.accelerationIncludingGravity.y || 0;
				az = (event.accelerationIncludingGravity.z || 0) - 9.81;
			}
			const magnitude = Math.sqrt(ax * ax + ay * ay + az * az);
			if (magnitude > latestSeismicMax) latestSeismicMax = magnitude;
			if (magnitude > seismicThreshold && !recordingEvent && (now - lastEventTime > 3000)) {
				triggerEvent("Seismic");
			}
		}

		function triggerEvent(type) {
			recordingEvent = true;
			eventCaptureStartTime = Date.now();
			const triggerTime = eventCaptureStartTime;
			eventPreBuffer = preAudioBuffer
				.filter(chunk => chunk.timestamp >= (triggerTime - 5000))
				.map(chunk => chunk.data);
			eventPostBuffer = [];
			beep();
			logEvent(type);
		}

		function finalizeEventCapture() {
			recordingEvent = false;
			lastEventTime = Date.now();
			const combined = flattenBuffers(eventPreBuffer.concat(eventPostBuffer));
			const mp3Blob = createMP3Blob(combined, audioContext.sampleRate);
			const url = URL.createObjectURL(mp3Blob);
			const key = `audio_${Date.now()}`;
			const link = document.createElement('a');
			link.href = url;
			link.download = `${key}.mp3`;
			link.textContent = `Audioclip ${key}`;
			link.className = "d-block mb-1 text-info";
			audioClipsDiv.appendChild(link);
			const reader = new FileReader();
			reader.onloadend = () => {
				try {
					localStorage.setItem(key, reader.result);
					loadAudioClips();
				} catch (e) {
					console.error('Storage error:', e);
				}
			};
			reader.readAsDataURL(mp3Blob);
			eventPreBuffer = [];
			eventPostBuffer = [];
		}

		function flattenBuffers(bufferArray) {
			const length = bufferArray.reduce((sum, buf) => sum + buf.length, 0);
			const result = new Float32Array(length);
			let offset = 0;
			bufferArray.forEach(buf => {
				result.set(buf, offset);
				offset += buf.length;
			});
			return result;
		}

		function float32ToInt16(buffer) {
			const l = buffer.length;
			const result = new Int16Array(l);
			for (let i = 0; i < l; i++) {
				const s = Math.max(-1, Math.min(1, buffer[i]));
				result[i] = s < 0 ? s * 32768 : s * 32767;
			}
			return result;
		}

		function createMP3Blob(samples, sampleRate) {
			const int16Samples = float32ToInt16(samples);
			const mp3encoder = new lamejs.Mp3Encoder(1, sampleRate, 64);
			const blockSize = 1152;
			const mp3Data = [];
			for (let i = 0; i < int16Samples.length; i += blockSize) {
				const sampleChunk = int16Samples.subarray(i, i + blockSize);
				const chunkCopy = new Int16Array(blockSize);
				chunkCopy.set(sampleChunk);
				const mp3buf = mp3encoder.encodeBuffer(chunkCopy);
				if (mp3buf.length > 0) {
					mp3Data.push(new Uint8Array(mp3buf));
				}
			}
			const mp3buf = mp3encoder.flush();
			if (mp3buf.length > 0) {
				mp3Data.push(new Uint8Array(mp3buf));
			}
			return new Blob(mp3Data, { type: 'audio/mp3' });
		}

		function downloadLog() {
			const blob = new Blob([logEntries.join('\n')], { type: 'text/plain' });
			const a = document.createElement('a');
			a.href = URL.createObjectURL(blob);
			a.download = 'log.txt';
			a.click();
			URL.revokeObjectURL(a.href);
		}

		function clearLog() {
			logEntries = [];
			logList.innerHTML = "";
			localStorage.removeItem('logEntries');
			const keysToRemove = [];
			for (let i = 0; i < localStorage.length; i++) {
				const key = localStorage.key(i);
				if (key?.startsWith("audio_")) keysToRemove.push(key);
			}
			keysToRemove.forEach(key => localStorage.removeItem(key));
			loadAudioClips();
		}

		document.getElementById('startStopBtn').addEventListener('click', startStopRecording);
		document.getElementById('downloadLogBtn').addEventListener('click', downloadLog);
		document.getElementById('clearLogBtn').addEventListener('click', clearLog);
		document.getElementById('audioThreshold').addEventListener('input', saveSettings);
		document.getElementById('seismicThreshold').addEventListener('input', saveSettings);
		document.getElementById('enableBeep').addEventListener('change', saveSettings);
		document.getElementById('enableAudioLog').addEventListener('change', saveSettings);

		window.addEventListener('resize', () => {
			canvas.width = canvas.parentElement.clientWidth;
			maxValuesCanvas.width = maxValuesCanvas.parentElement.clientWidth;
		});

		loadSettings();
		loadLogs();
		loadAudioClips();
	</script>
</body>

</html>